(declare-const x (_ BitVec 32)) ; x = int(argv[0])
(declare-const y (_ BitVec 32)) ; y = int(argv[1])
(declare-const z (_ BitVec 32))
(declare-const w (_ BitVec 32))

(assert (= z (bvmul x x))) ; z = x*x
(assert (= w (bvmul y y))) ; w = y*y

(assert (bvsle z (_ bv1 32))) ; if(z <= 1)

; check foo()
; if( ((z + w) % 7 == 0) && (x % 7 != 0) )
(assert (and (= (bvsmod (bvadd z w) (_ bv7 32)) (_ bv0 32)) (not (= (bvsmod x (_ bv7 32)) (_ bv0 32)))))
(check-sat)

; check bar()
(reset)

(declare-const x (_ BitVec 32)) ; x = int(argv[0])
(declare-const y (_ BitVec 32)) ; y = int(argv[1])
(declare-const z (_ BitVec 32))
(declare-const w (_ BitVec 32))

(declare-const z2 (_ BitVec 32)); z2

(assert (= z (bvmul x x))) ; z = x*x
(assert (= w (bvmul y y))) ; w = y*y
(assert (= z2 (bvsub z (_ bv1 32)))); z2 = z -1
(assert (bvsgt z (_ bv1 32))) ; if(z > 1)

(assert (not (= (bvsmod (bvsub (ite (= z (_ bv0 32)) (_ bv1 32) (bvshl (_ bv2 32) z2)) (_ bv1 32)) z) (_ bv0 32))));if( (2**z - 1) % z != 0)
(check-sat)


; check baz()
(reset)

(declare-const x (_ BitVec 32)) ; x = int(argv[0])
(declare-const y (_ BitVec 32)) ; y = int(argv[1])
(declare-const z (_ BitVec 32))
(declare-const w (_ BitVec 32))

(declare-const z2 (_ BitVec 32)) ; z2

(assert (= z (bvmul x x))) ; z = x*x
(assert (= w (bvmul y y))) ; w = y*y
(assert (= z2 (bvsub z (_ bv1 32)))) ; z2 = z -1
(assert (bvsgt z (_ bv1 32))) ; if(z > 1)

(assert  (= (bvsmod (bvsub (ite (= z (_ bv0 32)) (_ bv1 32) (bvshl (_ bv2 32) z2)) (_ bv1 32)) z) (_ bv0 32))) ; if( (2**z - 1) % z == 0)
(assert (= z (bvadd z w))) ; z = z + w
(check-sat)